diff --git a/app/meson.build b/app/meson.build
index eb0682f..67b0cbe 100644
--- a/app/meson.build
+++ b/app/meson.build
@@ -48,7 +48,7 @@ deps += [cc.find_library('rte_net_ice', dirs: [dpdk_libs_path], required: false)
 deps += [cc.find_library('rte_bus_vdev', dirs: [dpdk_libs_path], required: false)]
 
 deps += [dependency('threads')]
-deps += [dependency('numa', required: true)]
+deps += [dependency('numa', required: false)]
 deps += [dependency('pcap', required: true)]
 deps += [cc.find_library('dl', required: false)]
 deps += [cc.find_library('m', required: false)]
diff --git a/app/pktgen-port-cfg.c b/app/pktgen-port-cfg.c
index 1e4042a..f472bf8 100644
--- a/app/pktgen-port-cfg.c
+++ b/app/pktgen-port-cfg.c
@@ -180,12 +180,26 @@ allocate_port_info(uint16_t pid)
         goto leave;
     }
 
-    pinfo->rx_pkts = rte_calloc_socket("RxMbufs", MAX_PKT_RX_BURST, sizeof(struct rte_mbuf *),
-                                       RTE_CACHE_LINE_SIZE, sid);
+    /* Allocate RX packet buffers for each queue */
+    for (int q = 0; q < 16; q++) {
+        pinfo->rx_pkts[q] = rte_calloc_socket("RxMbufs", MAX_PKT_RX_BURST, sizeof(struct rte_mbuf *),
+                                               RTE_CACHE_LINE_SIZE, sid);
+        if (pinfo->rx_pkts[q] == NULL) {
+            pktgen_log_error("Cannot allocate RX burst for port %u queue %d", pid, q);
+            /* Free previously allocated queues */
+            for (int i = 0; i < q; i++)
+                rte_free(pinfo->rx_pkts[i]);
+            goto leave;
+        }
+    }
+
     pinfo->tx_pkts = rte_calloc_socket("TxMbufs", MAX_PKT_TX_BURST, sizeof(struct rte_mbuf *),
                                        RTE_CACHE_LINE_SIZE, sid);
-    if (pinfo->rx_pkts == NULL || pinfo->tx_pkts == NULL) {
-        pktgen_log_error("Cannot allocate RX/TX burst for port %u", pid);
+    if (pinfo->tx_pkts == NULL) {
+        pktgen_log_error("Cannot allocate TX burst for port %u", pid);
+        /* Free all RX queues */
+        for (int q = 0; q < 16; q++)
+            rte_free(pinfo->rx_pkts[q]);
         goto leave;
     }
 
@@ -227,7 +241,8 @@ allocate_port_info(uint16_t pid)
     return pinfo;
 leave:
     if (pinfo) {
-        rte_free(pinfo->rx_pkts);
+        for (int q = 0; q < 16; q++)
+            rte_free(pinfo->rx_pkts[q]);
         rte_free(pinfo->tx_pkts);
         rte_free(pinfo);
         l2p_set_port_pinfo(pid, NULL);
diff --git a/app/pktgen-port-cfg.h b/app/pktgen-port-cfg.h
index d2b54a6..b5c3c2a 100644
--- a/app/pktgen-port-cfg.h
+++ b/app/pktgen-port-cfg.h
@@ -133,7 +133,7 @@ typedef struct {
 typedef struct port_info_s {
     struct rte_eth_dev_info dev_info; /**< Device information */
     struct rte_eth_conf conf;         /**< Configuration settings */
-    struct rte_mbuf **rx_pkts;        /**< Array of pointers to packet buffers for RX */
+    struct rte_mbuf **rx_pkts[16];    /**< Array of pointers to packet buffers for RX per queue */
     struct rte_mbuf **tx_pkts;        /**< Array of pointers to packet buffers for TX */
 
     rte_atomic64_t port_flags;       /**< Special send flags for ARP and other */
diff --git a/app/pktgen.c b/app/pktgen.c
index 627034d..e8a1935 100644
--- a/app/pktgen.c
+++ b/app/pktgen.c
@@ -1057,7 +1057,7 @@ static inline void
 pktgen_main_receive(port_info_t *pinfo, uint16_t qid)
 {
     uint16_t nb_rx, nb_pkts = pinfo->rx_burst, pid;
-    struct rte_mbuf **pkts = pinfo->rx_pkts;
+    struct rte_mbuf **pkts = pinfo->rx_pkts[qid];
 
     if (unlikely(pktgen_tst_port_flags(pinfo, STOP_RECEIVING_PACKETS)))
         return;
@@ -1066,6 +1066,7 @@ pktgen_main_receive(port_info_t *pinfo, uint16_t qid)
 
     /* Read packets from RX queues and free the mbufs */
     if (likely((nb_rx = rte_eth_rx_burst(pid, qid, pkts, nb_pkts)) > 0)) {
+        // printf("Core %d received %u packets\n", rte_lcore_id(), nb_rx);
         struct rte_eth_stats *qstats = &pinfo->queue_stats;
 
         qstats->q_ipackets[qid] += nb_rx;
@@ -1280,7 +1281,7 @@ pktgen_main_rx_loop(void)
 
     pinfo  = l2p_get_pinfo_by_lcore(lid);
     rx_qid = l2p_get_rxqid(lid);
-
+    printf("DEBUG: RX Core Info: lid %3d, rx_qid %2d, cpu_id %2d, pinfo %p\n", lid, rx_qid, sched_getcpu(), pinfo);
     printf("RX lid %3d, pid %2d, qid %2d, Mempool %-16s @ %p\n", lid, pinfo->pid, rx_qid,
            l2p_get_rx_mp(pinfo->pid)->name, l2p_get_rx_mp(pinfo->pid));
 
diff --git a/scripts/measure-rx-tx-rate.lua b/scripts/measure-rx-tx-rate.lua
new file mode 100644
index 0000000..6239f76
--- /dev/null
+++ b/scripts/measure-rx-tx-rate.lua
@@ -0,0 +1,133 @@
+-- RX/TX Rate Measurement Script (based on measure-tx-rate.lua)
+
+-- Since we run from Pktgen-DPDK directory, just add current directory to path
+package.path = package.path .. ";./?.lua;?.lua;test/?.lua;app/?.lua;"
+
+require "Pktgen"
+
+local port = 0
+local sleeptime = tonumber(os.getenv("PKTGEN_DURATION")) or 10
+
+pktgen.stop(port)
+pktgen.clear(port)
+pktgen.clr()
+pktgen.delay(100)
+
+-- Configuration (same as measure-tx-rate.lua)
+pktgen.set(port, "size", 64)
+pktgen.set(port, "rate", 100)  -- Maximum rate
+pktgen.set(port, "count", 0)   -- Continuous transmission
+
+-- Set MAC addresses (same as measure-tx-rate.lua)
+pktgen.set_mac(port, "src", "08:c0:eb:b6:cd:5d")
+pktgen.set_mac(port, "dst", "08:c0:eb:b6:e8:05")
+
+-- Set IP addresses (same as measure-tx-rate.lua)
+pktgen.set_ipaddr(port, "src", "10.0.1.7")
+pktgen.set_ipaddr(port, "dst", "10.0.1.8/24")
+
+-- Set up Range configuration for TCP (same as measure-tx-rate.lua)
+pktgen.range.ip_proto("all", "tcp")
+
+-- Set MAC addresses in range (same as measure-tx-rate.lua)
+pktgen.range.src_mac(port, "start", "08:c0:eb:b6:cd:5d")
+pktgen.range.dst_mac(port, "start", "08:c0:eb:b6:e8:05")
+
+-- Set source IP (fixed, same as measure-tx-rate.lua)
+pktgen.range.src_ip(port, "start", "10.0.1.7")
+pktgen.range.src_ip(port, "inc", "0.0.0.0")
+pktgen.range.src_ip(port, "min", "10.0.1.7")
+pktgen.range.src_ip(port, "max", "10.0.1.7")
+
+-- Set destination IP (fixed, same as measure-tx-rate.lua)
+pktgen.range.dst_ip(port, "start", "10.0.1.8")
+pktgen.range.dst_ip(port, "inc", "0.0.0.0")
+pktgen.range.dst_ip(port, "min", "10.0.1.8")
+pktgen.range.dst_ip(port, "max", "10.0.1.8")
+
+-- Set source TCP port (20000-20255, increment by 1, same as measure-tx-rate.lua)
+pktgen.range.src_port(port, "start", 20000)
+pktgen.range.src_port(port, "inc", 1)
+pktgen.range.src_port(port, "min", 20000)
+pktgen.range.src_port(port, "max", 20255)
+
+-- Set destination TCP port (fixed at 20000, same as measure-tx-rate.lua)
+pktgen.range.dst_port(port, "start", 20000)
+pktgen.range.dst_port(port, "inc", 0)
+pktgen.range.dst_port(port, "min", 20000)
+pktgen.range.dst_port(port, "max", 20000)
+
+-- Set TTL (same as measure-tx-rate.lua)
+pktgen.range.ttl(port, "start", 64)
+pktgen.range.ttl(port, "inc", 0)
+pktgen.range.ttl(port, "min", 64)
+pktgen.range.ttl(port, "max", 64)
+
+-- Enable range mode (same as measure-tx-rate.lua)
+pktgen.set_range(port, "on")
+
+pktgen.delay(100)
+
+print("=== Starting RX/TX Rate Measurement ===")
+print("Configuration:")
+print("  Port: " .. port)
+print("  Packet Size: 64 bytes")
+print("  Protocol: TCP")
+print("  Test Duration: " .. sleeptime .. " seconds")
+print("  Rate: 100% (maximum)")
+print("  Range Mode: Enabled (Port 20000-20255)")
+print("==========================================")
+
+-- Start transmission
+print("Starting packet transmission for " .. sleeptime .. " seconds...")
+pktgen.start(port)
+
+-- Record initial statistics
+pktgen.delay(1000)  -- Wait 1 second for transmission to stabilize
+local initial_stats = pktgen.portStats("all", "port")[port]
+local initial_tx_pkts = initial_stats.opackets
+local initial_rx_pkts = initial_stats.ipackets
+
+-- Wait for test duration
+pktgen.delay(sleeptime * 1000)
+
+-- Stop transmission and get final statistics
+pktgen.stop(port)
+local final_stats = pktgen.portStats("all", "port")[port]
+local final_tx_pkts = final_stats.opackets
+local final_rx_pkts = final_stats.ipackets
+
+-- Calculate average rates in Mpps
+local total_tx_packets = final_tx_pkts - initial_tx_pkts
+local total_rx_packets = final_rx_pkts - initial_rx_pkts
+local avg_tx_rate_mpps = total_tx_packets / (sleeptime * 1000000)
+local avg_rx_rate_mpps = total_rx_packets / (sleeptime * 1000000)
+
+-- Calculate packet loss percentage
+local packet_loss_pct = 0
+if total_tx_packets > 0 then
+    packet_loss_pct = (1 - total_rx_packets/total_tx_packets) * 100
+end
+
+-- Display results
+print("\n=== RX/TX Rate Measurement Results ===")
+print("Test Duration: " .. sleeptime .. " seconds")
+print("Packet Size: 64 bytes")
+print("Protocol: TCP with ranges")
+print("Total Packets Transmitted: " .. total_tx_packets)
+print("Total Packets Received: " .. total_rx_packets)
+print("Average TX Rate: " .. string.format("%.3f", avg_tx_rate_mpps) .. " Mpps")
+print("Average RX Rate: " .. string.format("%.3f", avg_rx_rate_mpps) .. " Mpps")
+print("Packet Loss: " .. string.format("%.2f", packet_loss_pct) .. "%")
+print("=====================================")
+
+-- Print results in parseable format for automation
+print("RESULT_TX_RATE_MPPS:" .. string.format("%.3f", avg_tx_rate_mpps))
+print("RESULT_RX_RATE_MPPS:" .. string.format("%.3f", avg_rx_rate_mpps))
+print("RESULT_TX_PACKETS:" .. total_tx_packets)
+print("RESULT_RX_PACKETS:" .. total_rx_packets)
+
+-- Auto quit to prevent interactive mode - use os.exit instead of pktgen.quit()
+print("Auto-quitting pktgen...")
+pktgen.delay(1000)  -- Wait 1 second before quitting
+os.exit(0)
diff --git a/scripts/measure-tx-rate.lua b/scripts/measure-tx-rate.lua
new file mode 100644
index 0000000..d86e02a
--- /dev/null
+++ b/scripts/measure-tx-rate.lua
@@ -0,0 +1,99 @@
+-- TX Rate Measurement Script
+
+-- Since we run from Pktgen-DPDK directory, just add current directory to path
+package.path = package.path .. ";./?.lua;?.lua;test/?.lua;app/?.lua;"
+
+require "Pktgen"
+
+local port = 0
+local sleeptime = tonumber(os.getenv("PKTGEN_DURATION")) or 10
+
+pktgen.stop(port)
+pktgen.clear(port)
+pktgen.clr()
+pktgen.delay(100)
+
+-- Configuration
+pktgen.set(port, "size", 64)
+pktgen.set(port, "rate", 100)  -- Maximum rate
+pktgen.set(port, "count", 0)   -- Continuous transmission
+
+-- Set MAC addresses
+pktgen.set_mac(port, "src", "08:c0:eb:b6:cd:5d")
+pktgen.set_mac(port, "dst", "08:c0:eb:b6:e8:05")
+
+-- Set IP addresses
+pktgen.set_ipaddr(port, "src", "10.0.1.7")
+pktgen.set_ipaddr(port, "dst", "10.0.1.8/24")
+
+-- Set up Range configuration for TCP
+pktgen.range.ip_proto("all", "tcp")
+
+-- Set MAC addresses in range
+pktgen.range.src_mac(port, "start", "08:c0:eb:b6:cd:5d")
+pktgen.range.dst_mac(port, "start", "08:c0:eb:b6:e8:05")
+
+-- Set source IP (fixed)
+pktgen.range.src_ip(port, "start", "10.0.1.7")
+pktgen.range.src_ip(port, "inc", "0.0.0.0")
+pktgen.range.src_ip(port, "min", "10.0.1.7")
+pktgen.range.src_ip(port, "max", "10.0.1.7")
+
+-- Set destination IP (fixed)
+pktgen.range.dst_ip(port, "start", "10.0.1.8")
+pktgen.range.dst_ip(port, "inc", "0.0.0.0")
+pktgen.range.dst_ip(port, "min", "10.0.1.8")
+pktgen.range.dst_ip(port, "max", "10.0.1.8")
+
+-- Set source TCP port (20000-20255, increment by 1)
+pktgen.range.src_port(port, "start", 20000)
+pktgen.range.src_port(port, "inc", 1)
+pktgen.range.src_port(port, "min", 20000)
+pktgen.range.src_port(port, "max", 20255)
+
+-- Set destination TCP port (fixed at 20000)
+pktgen.range.dst_port(port, "start", 20000)
+pktgen.range.dst_port(port, "inc", 0)
+pktgen.range.dst_port(port, "min", 20000)
+pktgen.range.dst_port(port, "max", 20000)
+
+-- Set TTL
+pktgen.range.ttl(port, "start", 64)
+pktgen.range.ttl(port, "inc", 0)
+pktgen.range.ttl(port, "min", 64)
+pktgen.range.ttl(port, "max", 64)
+
+-- Enable range mode
+pktgen.set_range(port, "on")
+
+pktgen.delay(100)
+
+-- Start transmission
+print("Starting packet transmission for " .. sleeptime .. " seconds...")
+pktgen.start(port)
+
+-- Record initial statistics
+pktgen.delay(1000)  -- Wait 1 second for transmission to stabilize
+local initial_stats = pktgen.portStats("all", "port")[port]
+local initial_tx_pkts = initial_stats.opackets
+
+-- Wait for test duration
+pktgen.delay(sleeptime * 1000)
+
+-- Stop transmission and get final statistics
+pktgen.stop(port)
+local final_stats = pktgen.portStats("all", "port")[port]
+local final_tx_pkts = final_stats.opackets
+
+-- Calculate average TX rate in Mpps
+local total_packets = final_tx_pkts - initial_tx_pkts
+local avg_tx_rate_mpps = total_packets / (sleeptime * 1000000)
+
+-- Display results
+print("\n=== TX Rate Measurement Results ===")
+print("Test Duration: " .. sleeptime .. " seconds")
+print("Packet Size: 64 bytes")
+print("Protocol: TCP")
+print("Total Packets Transmitted: " .. total_packets)
+print("Average TX Rate: " .. string.format("%.3f", avg_tx_rate_mpps) .. " Mpps")
+print("=====================================\n")
\ No newline at end of file
diff --git a/scripts/simple-test.lua b/scripts/simple-test.lua
new file mode 100644
index 0000000..e2a02c8
--- /dev/null
+++ b/scripts/simple-test.lua
@@ -0,0 +1,16 @@
+-- Simple test script to check if lua execution works
+package.path = package.path .. ";./?.lua;?.lua;test/?.lua;app/?.lua;"
+
+require "Pktgen"
+
+local port = 0
+
+print("Simple test script loaded successfully")
+print("Stopping and clearing port " .. port)
+
+pktgen.stop(port)
+pktgen.clear(port)
+pktgen.clr()
+pktgen.delay(100)
+
+print("Test completed successfully")
diff --git a/scripts/simple-tx-rate.lua b/scripts/simple-tx-rate.lua
new file mode 100644
index 0000000..86cde97
--- /dev/null
+++ b/scripts/simple-tx-rate.lua
@@ -0,0 +1,55 @@
+-- Simplified TX Rate Measurement Script
+package.path = package.path .. ";./?.lua;?.lua;test/?.lua;app/?.lua;"
+
+require "Pktgen"
+
+local port = 0
+local sleeptime = 3  -- Reduced to 3 seconds for testing
+
+print("Starting simplified TX rate measurement...")
+
+pktgen.stop(port)
+pktgen.clear(port)
+pktgen.clr()
+pktgen.delay(100)
+
+-- Basic configuration
+pktgen.set(port, "size", 64)
+pktgen.set(port, "rate", 100)  -- Maximum rate
+pktgen.set(port, "count", 0)   -- Continuous transmission
+
+-- Simple MAC and IP addresses (no range)
+pktgen.set_mac(port, "src", "08:c0:eb:b6:cd:5d")
+pktgen.set_mac(port, "dst", "08:c0:eb:b6:e8:05")
+pktgen.set_ipaddr(port, "src", "10.0.1.7")
+pktgen.set_ipaddr(port, "dst", "10.0.1.8/24")
+
+pktgen.delay(100)
+
+-- Start transmission
+print("Starting packet transmission for " .. sleeptime .. " seconds...")
+pktgen.start(port)
+
+-- Record initial statistics
+pktgen.delay(1000)  -- Wait 1 second for transmission to stabilize
+local initial_stats = pktgen.portStats("all", "port")[port]
+local initial_tx_pkts = initial_stats.opackets
+
+-- Wait for test duration
+pktgen.delay(sleeptime * 1000)
+
+-- Stop transmission and get final statistics
+pktgen.stop(port)
+local final_stats = pktgen.portStats("all", "port")[port]
+local final_tx_pkts = final_stats.opackets
+
+-- Calculate average TX rate in Mpps
+local total_packets = final_tx_pkts - initial_tx_pkts
+local avg_tx_rate_mpps = total_packets / (sleeptime * 1000000)
+
+-- Display results
+print("\n=== Simplified TX Rate Results ===")
+print("Test Duration: " .. sleeptime .. " seconds")
+print("Total Packets Transmitted: " .. total_packets)
+print("Average TX Rate: " .. string.format("%.3f", avg_tx_rate_mpps) .. " Mpps")
+print("====================================\n")
